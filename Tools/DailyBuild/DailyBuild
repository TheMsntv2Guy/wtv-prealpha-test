#
#	File:	DailyBuild - a script that gets called once a day to do an automatic build
#	Date:	4/18/96
#
#	Copyright Artemis Research, Inc. 1996  All rights reserved.
#
#
#  Everything should be built twice, once for internal, debug builds, and again for external non-debug builds
#

Set CaseSensitive 0;		# for options case insensitivity

	SET gScriptName				"DailyBuld";
#	SET gBumpBuildNumber		1;
	SET gBuildNumberFile		"{SystemFolder}Preferences:MPW:WEBTV.Build.Number";
	SET gLogPileDirectory		"{Boot}misc:logpile:";
	SET gBuildLogFile			"";
	SET gMWBuildErrorFile1		"{WTV:}WebTV╣PPC.Error.log";
	SET gMWBuildErrorFile2		"{WTV:}WebTV╣PPCNoDebug.Error.log";
	SET gBuildNumber			0;
	SET gOverrideBuildNumber	0;
	SET gExternalOption			1;
	SET gInternalOption			1;
	SET gSimulatorBuildOption	1;
	SET gBoxROMBuildOption		1;
	SET gNoCheckoutOption		0;
	SET gCopyOptions			"-p -y";
	SET gSoftwarePhase			"Beta 2"
	SET gCleanOption			0;
	SET mwbOptions				"";
	
	SET helpMessage 'ECHO "## Usage: DailyBuild [options] Хn Х
				-help                Print this message Хn Х
				-clean               Rebuild everything (clean build) Хn Х
				-NoCheckout          Do not checkout newer sources before build Хn Х
				-NoExternal          Do not build a version of the software (ROM and Simulator) that points to production services Хn Х
				-NoInternal          Do not build a version of the software (ROM and Simulator) that points to test services Хn Х
				-NoSimulatorBuild    Do not build the Simulator Хn Х
				-NoBoxROMBuild       Do not build the ROM Хn Х
				-build=#             Override the build number (normally gets it from the build number file). Хn Х
				-phase=#             Set the phase, currently defaults to Х"{gSoftwarePhase}Х". Хn Х
				" '

LOOP
	Break IF {#} == 0

	IF "{1}" =~ /Х-help/
		{helpmessage}
		exit 2;
	
	ELSE IF "{1}" =~ /Х-clean/
		SET gCleanOption 1;
	
	ELSE IF "{1}" =~ /Х-NoCheckout/
		SET gNoCheckoutOption 1;
	
	ELSE IF "{1}" =~ /Х-noexternal/
		SET gExternalOption 0;
	
	ELSE IF "{1}" =~ /Х-nointernal/
		SET gInternalOption 0;
	
	ELSE IF "{1}" =~ /Х-NoSimulatorBuild/ || "{1}" =~ /Х-NoSimBuild/
		SET gSimulatorBuildOption 0;
	
	ELSE IF "{1}" =~ /Х-NoROMBuild/ || "{1}" =~ /Х-NoBoxROMBuild/ || "{1}" =~ /Х-NoBoxBuild/
		SET gBoxROMBuildOption 0;
	
	ELSE IF "{1}" =~ /Х-build=(┼)е1/
		SET gOverrideBuildNumber "{{е1}};
	
	ELSE IF "{1}" =~ /Х-phase=(┼)е1/
		SET gSoftwarePhase "{{е1}};
	
	#ELSE IF "{1}" =~ /Х-NoBump/
	#	SET gBumpBuildNumber 0;
	#
	ELSE
		ECHO "### {gScriptName}: ERROR: unknown flag: Х'{1}Х'"
		{helpmessage}
		exit 2;
		
	END
	SHIFT
END

#
# This automatic build number bumping wasn't working very well, so
#	I moved it to a separate script -- BumpBuildNumber.
#
#if ( {gBumpBuildNumber} )
#	if ( !`Exists "{gBuildNumberFile}"` )
#		echo "### ERROR: {gBuildNumberFile} file did not exists!!!" 
#		echo "### ERROR: one will be created reseting version at 1"
#		echo "0" > "{gBuildNumberFile}"
#	end	
#	
#	set gBuildNumber `Evaluate Х`cat "{gBuildNumberFile}"Х` + 1`
#	echo "{gBuildNumber}" > "{gBuildNumberFile}"
#end
if ( {gOverrideBuildNumber} )
	set gBuildNumber "{gOverrideBuildNumber}";
else
	set gBuildNumber ""`cat "{gBuildNumberFile}"`;
end


set exit 0;
NewFolder "{gLogPileDirectory}" и dev:null || set status 0

SET gBuildLogFile			"{gLogPileDirectory}Build.{gBuildNumber}.`date -n`.log";
ECHO "" > "{gBuildLogFile}";
rm "{gMWBuildErrorFile1}" и dev:null || set status 0;  # clear out the metrowerks build errors
rm "{gMWBuildErrorFile2}" и dev:null || set status 0;  # clear out the metrowerks build errors
open "{gBuildLogFile}"
SizeWindow 894 374 "{gBuildLogFile}"
MoveWindow 36 21 "{gBuildLogFile}"

SET StartTime `Date -n`
ECHO "#" ии "{{gBuildLogFile}}";
ECHO "# {gScriptName} Starting╔ `Date -s`" ии "{{gBuildLogFile}}";
ECHO "#" ии "{{gBuildLogFile}}";


#set password `CoolRequest -private -hide "Enter your unix password"`
set password 'cocah1';
#MountUnix ии "{{gBuildLogFile}}"
Choose -u ed -pw "{password}" Artemis:homeless:ed ии "{{gBuildLogFile}}";
Choose -u ed -pw "{password}" Artemis:MacServer:MacServer ии "{{gBuildLogFile}}";
UnMountProject -a и dev:null || set Status 0;
MountProject "MacServer:Source:WebTV:" ии "{{gBuildLogFile}}";
CheckoutDir -r "Skunk:WebTV:" ии "{{gBuildLogFile}}";


if ( !{gNoCheckoutOption} )
	ECHO "# Checkout log..." ии "{{gBuildLogFile}}";
	# remove these guys, so they get checked out again (so we don't use old versions)
	rm -y -p "{WTV:}Interfaces:BuildControl.h"  "{WTV:}Interfaces:SystemVersion.h"  ии "{{gBuildLogFile}}";
	Checkout -p -r -newer ии "{{gBuildLogFile}}";
else
	ECHO "# Skipping checkout process (overridden on command line)..." ии "{{gBuildLogFile}}";
	ECHO "# Just checking out the BuildControl.h SystemVersion.h " ии "{{gBuildLogFile}}";
	rm -y -p "{WTV:}Interfaces:BuildControl.h"  "{WTV:}Interfaces:SystemVersion.h"  ии "{{gBuildLogFile}}";
	Checkout -project "WebTV║Interfaces║" -p BuildControl.h SystemVersion.h ии "{{gBuildLogFile}}";
end


# update SystemVersion.h...
	ECHO "#" ии "{{gBuildLogFile}}";
	ECHO "# Updating SystemVersion.h with build {gBuildNumber}..." ии "{{gBuildLogFile}}";
	ECHO "#" ии "{{gBuildLogFile}}";
	echo "#define kSoftwarePhase	Х"{gSoftwarePhase} (Internal) Х"" > "{WTV:}Interfaces:SystemVersion.h.Internal";
	echo "#define kSoftwareBuild Х" (build {gBuildNumber})Х"" >> "{WTV:}Interfaces:SystemVersion.h.Internal";
	echo "#define kSoftwareBuildNumber {gBuildNumber}" >> "{WTV:}Interfaces:SystemVersion.h.Internal";
	echo "#define kSoftwarePhase	Х"{gSoftwarePhase}Х"" > "{WTV:}Interfaces:SystemVersion.h.External";
	echo "#define kSoftwareBuild Х" (build {gBuildNumber})Х"" >> "{WTV:}Interfaces:SystemVersion.h.External";
	echo "#define kSoftwareBuildNumber {gBuildNumber}" >> "{WTV:}Interfaces:SystemVersion.h.External";

# setup BuildControl.h...
	ECHO "#" ии "{{gBuildLogFile}}";
	ECHO "# Updating BuildControl.h for external build..." ии "{{gBuildLogFile}}";
	ECHO "#" ии "{{gBuildLogFile}}";
	cp -p -d -y "{WTV:}Interfaces:BuildControl.h" "{WTV:}Interfaces:BuildControl.h.Internal" ии "{{gBuildLogFile}}";
	echo "#define EXTERNAL_BUILD" >  "{WTV:}Interfaces:BuildControl.h.External"
	cat  "{WTV:}Interfaces:BuildControl.h" >>  "{WTV:}Interfaces:BuildControl.h.External" 

# send sources over to unix...
	if ( {gBoxROMBuildOption} )
		ECHO "#" ии "{{gBuildLogFile}}";
		ECHO "# Unixify log..." ии "{{gBuildLogFile}}";
		ECHO "#" ии "{{gBuildLogFile}}";
		cd "{WTV:}";
		Unixify "{{WTV:}}"
	end 
	
# Build a new ROM Store...
	if ( {gSimulatorBuildOption} )
		begin;
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Creating new ROM Store..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			Directory "{{WTV:}}ROM:";
			Romify -p=1 -romtop=BFE00000 : > "{{WTV:}}ROM Store.New" || Directory "{{WTV:}}";
			Directory "{{WTV:}}";
			Rename -y "{{WTV:}}ROM Store.New" "{{WTV:}}ROM Store"
		end ии "{{gBuildLogFile}}";
	end

##
## Internal build.....
##
	if ( {gInternalOption} )
		cd "{WTV:}";
	
		cp -p -d -y "{WTV:}Interfaces:SystemVersion.h.Internal" "{WTV:}Interfaces:SystemVersion.h" ии "{{gBuildLogFile}}";
		setfile -m "11/19/95 11:05:00 AM" -c "11/19/95 11:05:00 AM" "{WTV:}Interfaces:SystemVersion.h" ии "{{gBuildLogFile}}";
		cp -p -d -y "{WTV:}Interfaces:BuildControl.h.Internal" "{WTV:}Interfaces:BuildControl.h" ии "{{gBuildLogFile}}";
		setfile -m "11/19/95 11:05:00 AM" -c "11/19/95 11:05:00 AM" "{WTV:}Interfaces:BuildControl.h" ии "{{gBuildLogFile}}";
		setfile -m . "{WTV:}System:SystemVersion.c" ии "{{gBuildLogFile}}";
		if ( {gCleanOption} )
			Set mwbOptions " -clean ";
		else
			Set mwbOptions "";
		end;
		if ( {gSimulatorBuildOption} )
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Fire off Metrowerks build (log later)..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			MetrowerksBuild {mwbOptions} WebTV╣PPC ии "{{gBuildLogFile}}"; 
		else
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Skipping Metrowerks build due to command line option!!!" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
		end
		
		# set up directives for the build....
		if ( {gBoxROMBuildOption} )
			Set build_directives "OFFICIAL_BUILD=1 ";
			if ( {gCleanOption} )
				ECHO "#" ии "{{gBuildLogFile}}";
				ECHO "# Doing a make clean..." ии "{{gBuildLogFile}}";
				ECHO "#" ии "{{gBuildLogFile}}";
				rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; gmake {build_directives} cleanall;" ии "{{gBuildLogFile}}";
			end;
			rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; cp -p ./Interfaces/SystemVersion.h.Internal ./Interfaces/SystemVersion.h;" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Internal unirom ROM buld..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; gmake {build_directives} unirom;" ии "{{gBuildLogFile}}";
			
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Copying ROM images back from UNIX..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			rm -y "{WTV:}".o:debug:;
			NewFolder "{WTV:}".o:debug:
			cp {gCopyOptions} "ed:WebTV:objects:app:result:approm.o" "{WTV:}".o:debug:approm  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:app:result:approm.code.o" "{WTV:}".o:debug:approm.code.o  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:boot:result:bootrom.o" "{WTV:}".o:debug:bootrom  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:unirom:result:unirom.o" "{WTV:}".o:debug:unirom  ии "{{gBuildLogFile}}";
		else
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Skipping ROM build due to command line option!!!" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
		end

		ECHO "#" ии "{{gBuildLogFile}}";
		ECHO "# Waiting for the metrowerks builds to finish" ии "{{gBuildLogFile}}";
		ECHO "#" ии "{{gBuildLogFile}}";
		if ( {gSimulatorBuildOption} )
			Loop
				break if ( `Exists "{gMWBuildErrorFile1}"` )
				wait -nosound for 00:00:15;
			end
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Metrowerks error log ({gMWBuildErrorFile1})..." ии "{{gBuildLogFile}}";
			ECHO "# start:" ии "{{gBuildLogFile}}";
			cat "{gMWBuildErrorFile1}" ии "{{gBuildLogFile}}";
			ECHO "# end." ии "{{gBuildLogFile}}";
			mv -y "{gMWBuildErrorFile1}" "{gLogPileDirectory}debug.log.`date -n`.internal";
		end
	# save off the builds
		begin;
			ECHO "#"
			ECHO "# Saving off ROM images..."
			ECHO "#"
		
			set destination "{WTV:}Internal Builds:"
			if ( {gCleanOption} )
				Delete -i -p -y  "{destination}"
				NewFolder "{destination}"
			end;
			if ( {gSimulatorBuildOption} )
				Delete -y "{destination}Simulator:"
				NewFolder "{destination}Simulator:"
				cp {gCopyOptions} "{WTV:}"WebTV-Warrior.xSYM  "{destination}Simulator:"
				cp {gCopyOptions} "{WTV:}"WebTV-Warrior  "{destination}Simulator:"
				cp {gCopyOptions} "{WTV:}ROM Store"  "{destination}Simulator:"
			end;
			
			if ( {gBoxROMBuildOption} )
				Delete -y "{destination}ROM:"
				NewFolder "{destination}ROM:"
				cp {gCopyOptions} "{WTV:}".o:debug:approm  "{destination}ROM:"
				cp {gCopyOptions} "{WTV:}".o:debug:approm.code.o  "{destination}ROM:"
				cp {gCopyOptions} "{WTV:}".o:debug:bootrom  "{destination}ROM:"
				cp {gCopyOptions} "{WTV:}".o:debug:unirom  "{destination}ROM:"
				cp {gCopyOptions} "{WTV:}"Tools:GooberTerm:GooberTerm  "{destination}ROM:"
			end;
		end ии "{{gBuildLogFile}}";
	
		ECHO "#" ии "{{gBuildLogFile}}";
		ECHO "# Adding vers 1 resources to internal builds..." ии "{{gBuildLogFile}}";
		ECHO "#" ии "{{gBuildLogFile}}";
		Begin;
		echo "#include Х"SysTypes.rХ"";
			echo "";
			echo "resource 'vers' (1, purgeable) Х{";
			echo "	0x1,";
			echo "	0x00,";
			echo "	alpha,";
			echo "	0x{gBuildNumber},";
			echo "	verUS,";
			echo "	Х"1.0 {gSoftwarePhase} internal (build {gBuildNumber})Х",";
			echo "	Х"1.0 {gSoftwarePhase} internal (build {gBuildNumber}), Copyright Е1995-96 Artemis Research, Inc.Х"";
			echo "Х};";
		end > "{{WTV:}}Tools:DailyBuild:Vers1.r"
		
		for eachfile in `files -r -f -o -s "{destination}"`
			Rez -a -i "{RIncludes}" "{{WTV:}}Tools:DailyBuild:Vers1.r" -o "{eachfile}" ии "{{gBuildLogFile}}";
		end;
	end;

##
## External build.....
##
	if ( {gExternalOption} )
		ECHO "#" ии "{{gBuildLogFile}}";
		ECHO "# Fire off Metrowerks build (log later)..." ии "{{gBuildLogFile}}";
		ECHO "#" ии "{{gBuildLogFile}}";
		cd "{WTV:}";
		cp -p -d -y "{WTV:}Interfaces:SystemVersion.h.External" "{WTV:}Interfaces:SystemVersion.h" ии "{{gBuildLogFile}}";
		setfile -m "11/19/95 11:05:00 AM" -c "11/19/95 11:05:00 AM" "{WTV:}Interfaces:SystemVersion.h" ии "{{gBuildLogFile}}";
		cp -p -d -y "{WTV:}Interfaces:BuildControl.h.External" "{WTV:}Interfaces:BuildControl.h" ии "{{gBuildLogFile}}";
		setfile -m "11/19/95 11:05:00 AM" -c "11/19/95 11:05:00 AM" "{WTV:}Interfaces:BuildControl.h" ии "{{gBuildLogFile}}";
		setfile -m . "{WTV:}System:SystemVersion.c" ии "{{gBuildLogFile}}";
		if ( {gCleanOption} )
			Set mwbOptions " -clean ";
		else
			Set mwbOptions "";
		end;
		if ( {gSimulatorBuildOption} )
			MetrowerksBuild {mwbOptions} WebTV╣PPCNoDebug ии "{{gBuildLogFile}}"; 
		else
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Skipping Metrowerks build due to command line option!!!" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
		end
	
		if ( {gBoxROMBuildOption} )
			Set build_directives "OFFICIAL_BUILD=1  EXTERNAL_BUILD=1"
			if ( {gCleanOption} )
				ECHO "#" ии "{{gBuildLogFile}}";
				ECHO "# Doing a make clean..." ии "{{gBuildLogFile}}";
				ECHO "#" ии "{{gBuildLogFile}}";
				rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; gmake {build_directives} cleanall;" ии "{{gBuildLogFile}}";
			end;
			rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; cp -p ./Interfaces/SystemVersion.h.External ./Interfaces/SystemVersion.h;" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# External unirom ROM buld..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			rcmd -u {UnixUser} -p "{password}" -h 'homeless.artemis.com' -c "cd WebTV; gmake {build_directives} unirom;" ии "{{gBuildLogFile}}";
			
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Copying ROM images back from UNIX..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			rm -y "{WTV:}".o:debug-external:;
			NewFolder "{WTV:}".o:debug-external:
			cp {gCopyOptions} "ed:WebTV:objects:app-external:result:approm.o" "{WTV:}".o:debug-external:approm  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:app-external:result:approm.code.o" "{WTV:}".o:debug-external:approm.code.o  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:boot-external:result:bootrom.o" "{WTV:}".o:debug-external:bootrom  ии "{{gBuildLogFile}}";
			cp {gCopyOptions} "ed:WebTV:objects:unirom-external:result:unirom.o" "{WTV:}".o:debug-external:unirom  ии "{{gBuildLogFile}}";
		else
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Skipping ROM build due to command line option!!!" ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
		end
		
		ECHO "#" ии "{{gBuildLogFile}}";
		ECHO "# Waiting for the metrowerks builds to finish" ии "{{gBuildLogFile}}";
		ECHO "#" ии "{{gBuildLogFile}}";
		if ( {gSimulatorBuildOption} )
			Loop
				break if ( `Exists "{gMWBuildErrorFile2}"` )
				wait -nosound for 00:00:15;
			end
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Metrowerks error log ({gMWBuildErrorFile1})..." ии "{{gBuildLogFile}}";
			ECHO "# start:" ии "{{gBuildLogFile}}";
			cat "{gMWBuildErrorFile2}" ии "{{gBuildLogFile}}";
			ECHO "# end." ии "{{gBuildLogFile}}";
			mv -y "{gMWBuildErrorFile2}" "{gLogPileDirectory}nodeb.log.`date -n`.external";
		end

		# save off the builds
			begin;
				ECHO "#"
				ECHO "# Saving off ROM images..."
				ECHO "#"
			
				set destination "{WTV:}External Builds:"
				if ( {gCleanOption} )
					Delete -i -p -y  "{destination}"
					NewFolder "{destination}"
				end;
				if ( {gSimulatorBuildOption} )
					Delete -y "{destination}Simulator:"
					NewFolder "{destination}Simulator:"
					cp {gCopyOptions} "{WTV:}"WebTV-Warrior-NoDebug  "{destination}Simulator:"
					cp {gCopyOptions} "{WTV:}ROM Store"  "{destination}Simulator:"
				end;
				
				if ( {gBoxROMBuildOption} )
					Delete -y "{destination}ROM:"
					NewFolder "{destination}ROM:"
					cp {gCopyOptions} "{WTV:}".o:debug-external:approm  "{destination}ROM:"
					cp {gCopyOptions} "{WTV:}".o:debug-external:approm.code.o  "{destination}ROM:"
					cp {gCopyOptions} "{WTV:}".o:debug-external:bootrom  "{destination}ROM:"
					cp {gCopyOptions} "{WTV:}".o:debug-external:unirom  "{destination}ROM:"
					cp {gCopyOptions} "{WTV:}"Tools:GooberTerm:GooberTerm  "{destination}ROM:"
				end;
	
			end ии "{{gBuildLogFile}}";
			
			ECHO "#" ии "{{gBuildLogFile}}";
			ECHO "# Adding vers 1 resources to external builds..." ии "{{gBuildLogFile}}";
			ECHO "#" ии "{{gBuildLogFile}}";
			Begin;
			echo "#include Х"SysTypes.rХ"";
				echo "";
				echo "resource 'vers' (1, purgeable) Х{";
				echo "	0x1,";
				echo "	0x00,";
				echo "	alpha,";
				echo "	0x{gBuildNumber},";
				echo "	verUS,";
				echo "	Х"1.0 {gSoftwarePhase} external (build {gBuildNumber})Х",";
				echo "	Х"1.0 {gSoftwarePhase} external (build {gBuildNumber}), Copyright Е1995-96 Artemis Research, Inc.Х"";
				echo "Х};";
			end > "{{WTV:}}Tools:DailyBuild:Vers1.r"
			
			for eachfile in `files -r -f -o -s "{destination}"`
				Rez -a -i "{RIncludes}" "{{WTV:}}Tools:DailyBuild:Vers1.r" -o "{eachfile}" ии "{{gBuildLogFile}}";
			end;
		
	
	end ## external build




ECHO "#" ии "{{gBuildLogFile}}";
ECHO "# Generating NameRevisions file ({gLogPileDirectory}vers.{gBuildNumber}.`date -n`.log)..." ии "{{gBuildLogFile}}";
ECHO "# start:" ии "{{gBuildLogFile}}";
cd "{WTV:}";
Project "WebTV║"
set namer_proj `Project`; export namer_proj
echo "Set exit 0;" > "{gLogPileDirectory}vers.{gBuildNumber}.`date -n`.log"
NamerOx -r -n "Build_{gBuildNumber}" и "{gLogPileDirectory}vers.{gBuildNumber}.`date -n`.log"

ECHO "#" ии "{{gBuildLogFile}}";
ECHO "# {gScriptName} Complete╔ `Date -s`" ии "{{gBuildLogFile}}";
ECHO "#" ии "{{gBuildLogFile}}";
SET EndTime `Date -n`; 
SET TotalTime `Evaluate {EndTime} - {StartTime}`; 
SET Temp `Evaluate {TotalTime} о 60`;
SET Seconds `Evaluate {TotalTime} MOD 60`; 
SET Hours `Evaluate {Temp} о 60`; 
SET Minutes `Evaluate {Temp} MOD 60`;
IF ("{Seconds}" < 10); SET Seconds "0{Seconds}"; END; 
IF ("{Minutes}" < 10); SET Minutes "0{Minutes}"; END; 
IF ("{Hours}" < 10); SET Hours "0{Hours}"; END;
ECHO "# The Total build time was {Hours}:{Minutes}:{Seconds}.Хn#Хn#" ии "{{gBuildLogFile}}";
ECHO "" ии "{{gBuildLogFile}}";
ECHO "" ии "{{gBuildLogFile}}";

close -y "{{gBuildLogFile}}";
# Tell AppleScript to to tell Eudora to send out the message....
#"{{WTV:}}Tools:DailyBuild:Send Mail" "{{WTV:}}Tools:DailyBuild:MailingList" "{{gBuildLogFile}}"

