#
#	File:		VerifySources
#
#	Contains:	xxx put contents here xxx
#
#	Written by:	xxx put writers here xxx
#
#	Copyright:	© 1994 by Rocket Science Games, Inc., all rights reserved.
#
#	Change History (most recent first):
#
#		 <4>	 1/27/95	CRC		fix side by side width bug, put in short option
#		 <3>	 1/25/95	CRC		make it better
#		 <2>	12/20/94	CRC		echo full path in messages
#		 <1>	12/20/94	CRC		This script checks the local project tree for files that do not
#									correspond to the checked in project tree.
#
# To Do:
#

### MPW 3.4.1 StreamEdit fails with ² ³ type variables
if "`version`" !~ /Å3.4.1Å/
	Alias OldStreamEdit StreamEdit
end

# Check all local files against checked in project and report any discrepancies
Set defaultDirectory "{WTV:}"
Set server "MacServer:Source:WebTV:"
Set autoMountOK 1
Set tempFolder "{defaultDirectory}Temporary:"
Set checkStuffOut 1
Set checkStuffIn 1
Set doItForYou 0
For name in {"parameters"}
	If {nextParamIsFolder}
		Set tempFolder "{name}"
		Set nextParamIsFolder 0
	Else If {nextParamIsOptions}
		Set mergeOptions "{name}"
		Set nextParamIsOptions 0
	Else If "{name}" == "-d" || "{name}" == "-delete"
		Set deleteIt 1
	Else If "{name}" == "-e" || "{name}" == "-execute"
		Set doItForYou 1
	Else If "{name}" == "-i" || "{name}" == "-in"
		Set checkStuffOut 0
	Else If "{name}" == "-m"  || "{name}" == "-noMount"
		Set autoMountOK 0
	Else If "{name}" == "-o" || "{name}" == "-out"
		Set checkStuffIn 0
	Else If "{name}" == "-s"  || "{name}" == "-short"
		Set useShortNames 1
	Else If "{name}" == "-t"  || "{name}" == "-temp"
		Set nextParamIsFolder 1
	Else If "{name}" == "-u" || "{name}" == "-updateLater"
		Set updateChangeLogOnCheckin 1
	Else If "{name}" == "-v" || "{name}" == "-verbose"
		Set verbose 1
	Else If "{name}" == "-x"  || "{name}" == "-mergeOptions"
		Set nextParamIsOptions 1
	Else If "{name}" =~ /-Å/ || "{name}" == -
		Echo "{0} lists out of date files, updating them if requested."
		Echo "{0} [-d] [-e] [-i] [-m] [-o] [-s] [-t dir] [-u] [-v] [-x "options"] [directoryÉ]"
		Echo "	-d or -delete			# Assume local files should be deleted instead of checked in."
		Echo "	-e or -execute			# Automatically execute the list of things to do."
		Echo "	-i or -in				# List only things to check in."
		Echo "	-m or -noMount 		# Don't automatically mount the WebTV project."
		Echo "	-o or -out				# List only things to check out."
		Echo "	-s or -short 			# Abbreviate the output where possible."
		Echo "	-t or -temp 			# Place work files in this directory (default: ¶"{tempFolder}¶")."
		Echo "	-u or -updateLater	# Update ChangeLog later while executing CheckWindowIn."
		Echo "	-v or -verbose			# Echo progress."
		Echo "	-x or -mergeOptions 	# Pass these options through to the MergeOut tool."
		Echo "	directoryÉ				# One or more directories. Default is ¶"¶{WTV:¶}¶""
		Exit 1
	Else 
		Break
	End
	Shift
End
If {usingVerifySources} != 1
	Echo "### Execute the following lines in your Worksheet first."
	Echo "### (Add them to mpw.local:userstartup"
	Echo "Set usingVerifySources 1"
	Echo "Export usingVerifySources"
	Exit 1
End
If  {#} == 0
	Set plusDefault "{defaultDirectory}"
Else
	Set plusDefault "endingSentinel"
End
Set dirSymbol ¶{WTV:¶}
Set checkoutString "¶"CheckOut -project WebTVº¶""
If "{deleteIt}" == "1"
	Set checkinString "Delete"
Else
	Set checkinString "CheckWindowIn"
End
If {verbose} == 1
	Echo "# `date -t`  Starting {0} `date -d`"
End
Delete -i "{tempFolder}commandList" "{tempFolder}commandListPlus" "{tempFolder}diffFiles" "{tempFolder}checkInNew" ¶
"{tempFolder}diffLocations" "{tempFolder}diffRevisions" "{tempFolder}diffRevisionsPlus" "{tempFolder}checkOutNew" ¶
"{tempFolder}localCheckouts" "{tempFolder}localFiles" "{tempFolder}localLocations" "{tempFolder}mergeOuts" ¶
"{tempFolder}localRevisions" "{tempFolder}newFiles" "{tempFolder}oldFiles" "{tempFolder}projectFiles" ¶
"{tempFolder}projectLocations" "{tempFolder}projectRevisions" "{tempFolder}projectRevisionsPlus" ¶
"{tempFolder}rawFileInfo" "{tempFolder}rawLocalRevisions" "{tempFolder}allLocalFiles"  "{tempFolder}deleteMe" 
If {autoMountOK}
	MountWebTVIfNeeded
End
For rootPath in {"parameters"} "{plusDefault}"
	If {verbose} == 1
		Echo "# `date -t`  Working on {rootPath}"
	End
	If "{rootPath}" == "endingSentinel"
		Break
	End
	If "{rootPath}" != "{defaultDirectory}"
		Set currentProject "-project `Project``echo "{rootPath}" | StreamEdit -e '1 Replace -c ° /:/ "º"'`"
		Set subPath "{defaultDirectory}{rootPath}"
		Set rootPath "{defaultDirectory}"
	Else
		Set subPath "{rootPath}"
	End
	# Look for files checked into the project which are not available locally.
		# get the project information in raw form
	### I tried to skip this if the database is unchanged, but looking at the root db isn't enough
#	If `Exists "{tempFolder}rawProjectInfo"` != "" 
#		If  `Newer "{tempFolder}rawProjectInfo" "{server}ProjectorDB"` == ""
			If {verbose} == 1
				Echo "# `date -t`  Create rawProjectInfo"
			End
			ProjectInfo {currentProject} -r -s -latest > "{tempFolder}rawProjectInfo"
#		End
#	Else
#		ProjectInfo {currentProject} -r -s -latest > "{tempFolder}rawProjectInfo"
#	End
		# process the raw project information into a path name
	If `Exists "{tempFolder}rawProjectInfo"` == ""
		Echo "### Create rawProjectInfo failed"; Exit 1
	End
	If {verbose} == 1
		Echo "# `date -t`  Create projectFiles"
	End
	StreamEdit -o "{tempFolder}projectFiles" -d -e '						¶
		/º/ 				Replace 		/[Âº]+º/ 	"'{dirSymbol}'";		¶
						Replace -c ° 	/º/ 		":"; 					¶
		/(Å:Å)¨1/ 		Set 			path 		¨1; 					¶
		/[ '¶'']*(Å)¨1,Å¶(OBSOLETE¶)/ 								¶
						Print 		"¶"" path ¨1 "¶" # ¶(OBSOLETE¶)";	¶
						Delete		;							¶
		/[ '¶'']*(Å)¨1,/ 	Print 		"¶"" path ¨1 "¶""				¶
						' "{tempFolder}rawProjectInfo"
	StreamEdit -o "{tempFolder}obsoleteFiles" -d -e '						¶
		/.o¶"/				Delete;								¶
		/¥Move/				Delete;								¶
		/:¶"/				Delete;								¶
		/\\/				Delete;								¶
		/¶"{{WTV:}}(Å)¨1¶"/	Print "¶"{WTV:}" ¨1 "¶" # (OBSOLETE)"	;	¶
				' "{WTV:}Tools:MPW:DeleteObsolete"
	Sort -l -unique -o "{tempFolder}projectFiles" "{tempFolder}projectFiles" "{tempFolder}obsoleteFiles"
		# get the local file directory in ram form
	Files -f -r -s "{subPath}"  > "{tempFolder}rawFileInfo"
		# process the local directory into files that could be checked out
	If {verbose} == 1
		Echo "# `date -t`  Create localFiles"
	End
	StreamEdit -o "{tempFolder}allLocalFiles" -d -e '						¶
		/StandardHeadersNoDebugPPC/	Delete ; 						¶
		/StandardHeadersNoDebug68K/	Delete ; 						¶
		/StandardHeadersPPC/	Delete ; 								¶
		/StandardHeaders68K/	Delete ; 								¶
		/WebTV:ROM:Tests:/ 	Delete ; 								¶
		/Saved WebTV Page/ 	Delete ; 								¶
		/Backup.doit/			Delete ; 								¶
		/WebTV:.o/			Delete ; 								¶
		/Memory Checkpoint/ 	Delete ; 								¶
		/Memory Difference/ 	Delete ; 								¶
		/WebTV:Temporary/ 	Delete ; 								¶
		/:ChangeLogEntry/		Delete ; 								¶
		/:CheckedOutList/		Delete ; 								¶
		/:WebTV.map/			Delete ; 								¶
		/:WebTV-/			Delete ; 								¶
		/:WebTV /			Delete ; 								¶
		1,$ 					Replace 	/'{rootPath}'/ "'{dirSymbol}'"; 	¶
		/({[Â'¶'']*)¨1/ 		Print 	"¶"" ¨1 "¶""					¶
						' "{tempFolder}rawFileInfo"
	StreamEdit -o "{tempFolder}deleteMe" -d -e '							¶
		/(Å:¶\¶\Å)¨1/		Print	"Delete "	¨1 "¶t# mpw temp" ;	¶
		/(Å¶}ccÅ.s¶")¨1/		Print	"Delete "	¨1 "¶t# gcc temp" ;		¶
		/(Å¶}ccÅ.i¶")¨1/		Print	"Delete "	¨1 "¶t# gcc temp" ;		¶
		/(ÅC.pipeÅ)¨1/		Print	"Delete "	¨1 "¶t# gcc temp" ;		¶
		/(Åa.outÅ)¨1/			Print	"Delete "	¨1 "¶t# Metrowerks temp" ;	¶
		/(Å.my¶")¨1/			Print	"Delete "	¨1 "¶t# compare temp" ;	¶
		/(Å,Å)¨1/			Print	"Delete "	¨1 "¶t# compare temp" ;	¶
							' "{tempFolder}allLocalFiles"
	StreamEdit -o "{tempFolder}localFiles" -e '					¶
		/:¶\¶\/		Delete ;								¶
		/¶}ccÅ.s¶"/	Delete ;								¶
		/¶}ccÅ.i¶"/	Delete ;								¶
		/C.pipe/		Delete ;								¶
		/a.out/		Delete ;								¶
		/.my¶"/		Delete ;								¶
		/,/			Delete ;								¶
							' "{tempFolder}allLocalFiles"
		# find the difference between the project files and the local files
	If {verbose} == 1
		Echo "# `date -t`  Create diffFiles"
	End
	sort -l -o "{tempFolder}localFiles" "{tempFolder}localFiles"
	sort -l -o "{tempFolder}projectFiles" "{tempFolder}projectFiles"
	Differ --ignore-case --side-by-side --suppress-common-lines --width=200	¶
		"{tempFolder}projectFiles" "{tempFolder}localFiles" >  "{tempFolder}diffFiles"
		# report the files in the project but not checked out locally
	If {checkStuffOut} == 1
		If {verbose} == 1
			Echo "# `date -t`  Files to checkout"
		End
		StreamEdit -o "{tempFolder}checkOutNew" -d -e '								¶
			/¶(OBSOLETE¶)/ 	Delete ; 											¶
			/</				Replace 		/Å¶}([Â:]Å)¨1/ 	"'{checkoutString}':"¨1; 	¶
							Replace 		/Å¶}(Å)¨1/ 		"'{checkoutString}'"¨1; 	¶
							Replace		/(Å)¨1:(Å)¨2/	¨1 " ¶"" ¨2;			¶
							Replace -c °	/:/				"º";					¶
							Replace		/ºº/				"º";					¶
							Replace		/[¶t]+[ ]*</		" # new";				¶
							Print											¶
							' "{tempFolder}diffFiles"
		sort -o "{tempFolder}checkOutNew" -l "{tempFolder}checkOutNew"
	Else
		echo " " > "{tempFolder}checkOutNew"
	End
		# report the files checked out locally but not in the project
	If {checkStuffIn} == 1
		If {verbose} == 1
			Echo "# `date -t`  Files checked out locally"
		End
		StreamEdit -o "{tempFolder}checkInNew" -d -e '						¶
		/¶(OBSOLETE¶)Å|Å(¶"Å¶")¨1/ Print		"Delete "	¨1 "¶t# obsolete" ;		¶
							Delete; 									¶
		/>(Å¶"Å)¨1/			Print		"'{checkinString}'" ¨1 " #¶tnew"	¶
							' "{tempFolder}diffFiles"
		sort -o "{tempFolder}checkInNew" -l  "{tempFolder}deleteMe" "{tempFolder}checkInNew"
	Else
		catenate "{tempFolder}deleteMe" > "{tempFolder}checkInNew"
	End
	# Look for project file revisions that don't match local revisions
		# process the raw project information into a path plus revision
	If {verbose} == 1
		Echo "# `date -t`  Create projectRevisionsPlus"
	End
	StreamEdit -o "{tempFolder}projectRevisionsPlus" -d -e '					¶
		/¶(OBSOLETE¶)/ 	Delete ; 									¶
		/º/ 				Replace 		/[Âº]+º/ 	"'{dirSymbol}'";		¶
						Replace -c ° 	/º/ 		":"; 					¶
		/(Å:Å)¨1/ 		Set 			path 		¨1; 					¶
		/[ '¶'']*(Å)¨1,([Â'¶'']*)¨2/ 									¶
						Print 		"¶"" path ¨1 "," ¨2 "¶"" 		¶
						' "{tempFolder}rawProjectInfo"
	If {verbose} == 1
		Echo "# `date -t`  Create projectRevisions"
	End
	StreamEdit -o "{tempFolder}projectRevisions" -d -e '					¶
		1,$ 				Replace 		/¶+/ 	""; 					¶
					 	Print 		;							¶
						' "{tempFolder}projectRevisionsPlus"
		# get the project information for each file
	If {verbose} == 1
		Echo "# `date -t`  Create rawLocalRevisions"
	End
	ProjectInfo -f `Files -r -s -f {subPath} | StreamEdit -e '					¶
		/WebTV:ROM:Tests:/ 		Delete ; 							¶
		/Saved WebTV Page/ 		Delete ; 							¶
		/Backup.doit/				Delete ; 							¶
		/WebTV:.o/				Delete ; 							¶
		/StandardHeadersNoDebugPPC/	Delete ; 						¶
		/StandardHeadersNoDebug68K/	Delete ; 						¶
		/StandardHeadersPPC/		Delete ; 							¶
		/StandardHeaders68K/		Delete ; 							¶
		/Memory Checkpoint/ 		Delete ; 							¶
		/Memory Difference/ 		Delete ; 							¶
		/WebTV:Temporary/ 		Delete ; 							¶
		/:ChangeLogEntry/			Delete ; 							¶
		/:CheckedOutList/			Delete ; 							¶
		/:WebTV.map/				Delete ; 							¶
		/:WebTV-/				Delete ; 							¶
		/:WebTV /				Delete ; 							¶
		/:¶\¶\/					Delete ;							¶
		/¶}ccÅ.s°/				Delete ;							¶
		/¶}ccÅ.i°/				Delete ;							¶
		/C.pipe/					Delete ;							¶
		/a.out/					Delete ;							¶
		/.my°/					Delete ;							¶
		/,/						Delete ;							¶
		'` > "{tempFolder}rawLocalRevisions"
		# turn the raw local project information into a path plus revision
	If {verbose} == 1
		Echo "# `date -t`  Create localRevisions"
	End
	StreamEdit -o "{tempFolder}localRevisions" -d -e '						¶
		/    Owner:/			Delete ;					 			¶
		/    Project: / 			Replace 		/:[Âº]+º/ "'{dirSymbol}'";	¶
							Replace -c ° 	/º/ 		":"; 				¶
		/    Project(Å)¨1/ 		Set 			path 		¨1;				¶
		/    Checked out:/		Delete ;					 			¶
		/[ '¶'']*(Å)¨1,([Â'¶'']*)¨2/ 	Set 		file 		¨1 "," ¨2;		¶
		/    Task:/			Print 		 "¶"" path file "¶"";	 		¶
							' "{tempFolder}rawLocalRevisions"
		# compare the checked-in project information with the local project information
	If {verbose} == 1
		Echo "# `date -t`  Create diffRevisions"
	End
	sort -l -o "{tempFolder}localRevisions" "{tempFolder}localRevisions"
	sort -l -o "{tempFolder}projectRevisions" "{tempFolder}projectRevisions"
	sort -l -o "{tempFolder}projectRevisionsPlus" "{tempFolder}projectRevisionsPlus"
	Differ --ignore-case --side-by-side --suppress-common-lines --width=200	¶
		"{tempFolder}projectRevisions" "{tempFolder}localRevisions" > "{tempFolder}diffRevisions"
	Differ --ignore-case --side-by-side --suppress-common-lines --width=200	¶
		"{tempFolder}projectRevisionsPlus" "{tempFolder}localRevisions" > "{tempFolder}diffRevisionsPlus"
		# report the differences in revisions
	Set local "local: "
	Set remote "; remote: "
	If {useShortNames}
		Set local ""
		Set remote " vs: "
	End

# could replace the CheckOut with UpdateToLatest:
#			Print	"UpdateToLatest ¶"" ¨1 "¶"¶t #'"{local}"'" ¨3 "'"{remote}"'" ¨2; 		¶
#			Replace		/(Å)¨1:(Å)¨2/	¨1 " ¶"" ¨2;							¶
#			Replace -c °	/:/				"º";									¶
# this replaces the four lines after /¶"(Å)¨1,..
# I haven't figured out the best way to make this an option yet.

	If {verbose} == 1
		Echo "# `date -t`  Files to Update"
	End
	If {checkStuffOut} == 1
		StreamEdit -o "{tempFolder}commandList" -d -e '									¶
			/,[0-9+]+Å|Å¶"Å,[0-9]+¶"/												¶
				Replace 		/¶"Å}(Å)¨1,([0-9+]+)¨2Å|Å,([0-9]+)¨3¶"/					¶
							"'{checkoutString}'" ¨1 "¶"¶t #1" ¨3 "#2" ¨2; 				¶
				Replace		/(Å)¨1:(Å)¨2/	¨1 " ¶"" ¨2;							¶
				Replace -c °	/:/				"º";									¶
				Replace		/º([Â ]+)¨1¶"/	"º ¶""¨1 "¶"";							¶
				Replace		/#1/			"#'"{local}"'";							¶
				Replace		/#2/			"'"{remote}"'";							¶
				Print		;													¶
					' "{tempFolder}diffRevisions"
	Else
		Echo " " > "{tempFolder}commandList"
	End
	If {checkStuffOut} == 1
		OldStreamEdit -o "{tempFolder}mergeOuts" -d -e '									¶
			/¶"(Å)¨1,([0-9+]+)¨2Å|Å,([0-9]+)¨3¶*¶"/									¶
				Set 		remote ¨2;												¶
				Set 		local ¨3;													¶
			/¶"(Å)¨1,²local³Å|Å,²local³¶*¶"/											¶
				Delete	;														¶
			/¶"(Å)¨1,([0-9+]+)¨2Å|Å,([0-9]+¶*)¨3¶"/									¶
				Print	"MergeOut '{mergeOptions}' ¶"" ¨1 "¶"¶t #'"{local}"'" ¨3 "'"{remote}"'" ¨2 ¶
					' "{tempFolder}diffRevisionsPlus"
	Else
		Echo " " > "{tempFolder}mergeOuts"
	End
	If {checkStuffIn} == 1
		StreamEdit -o "{tempFolder}localCheckouts" -d -e '									¶
			/¶"(Å)¨1,([0-9]+¶+)¨2¶"/												¶
				Print	"CheckWindowIn ¶"" ¨1 "¶"¶t #'"{local}"'" ¨2 "'"{remote}"'" ¨2; 		¶
					' "{tempFolder}localRevisions"	
		OldStreamEdit -o "{tempFolder}commandListPlus" -d -e '								¶
			/¶"(Å)¨1,([0-9+]+)¨2Å|Å,([0-9]+)¨3¶*¶"/									¶
				Set 		remote ¨2;												¶
				Set 		local ¨3;													¶
			/¶"(Å)¨1,²local³Å|Å,²local³¶*¶"/											¶
				Print	"CheckWindowIn ¶"" ¨1 "¶"¶t #'"{local}"'" local "*'"{remote}"'" remote  ¶
					' "{tempFolder}diffRevisionsPlus"
		Catenate "{tempFolder}commandListPlus" >> "{tempFolder}localCheckouts"
	Else
		Echo " " > "{tempFolder}localCheckouts"
	End
	If {updateChangeLogOnCheckin} != 1
		Catenate "{tempFolder}checkInNew" >> "{tempFolder}diffFilesUpdate" 
		Catenate "{tempFolder}localCheckouts" >> "{tempFolder}commandListUpdate" 
	End
	# Look for local files that are in the wrong directory (according to their project information).
		# strip the revision number from the project information
	If {verbose} == 1
		Echo "# `date -t`  Create projectLocations"
	End
	StreamEdit -o "{tempFolder}projectLocations" -d -e '					¶
		/(Å)¨1,Å/ 			Print		 ¨1 "¶""					¶
				' "{tempFolder}projectRevisions"
		# strip the revision number from the local information
	If {verbose} == 1
		Echo "# `date -t`  Create localLocations"
	End
	StreamEdit -o "{tempFolder}localLocations" -d -e '						¶
		/(Å)¨1,Å/ 			Print		 ¨1 "¶""					¶
				' "{tempFolder}localRevisions"
		# compare where the project says the file should be to the information in the file
	If {verbose} == 1
		Echo "# `date -t`  Create diffLocations"
	End
	sort -l -o "{tempFolder}localLocations" "{tempFolder}localLocations"
	sort -l -o "{tempFolder}projectLocations" "{tempFolder}projectLocations"
	Differ --ignore-case --side-by-side --suppress-common-lines --width=200	 ¶
		"{tempFolder}projectLocations" "{tempFolder}localLocations" > "{tempFolder}diffLocations"
		# report the differences in project location
	If {checkStuffIn}
		If {verbose} == 1
			Echo "# `date -t`  Files to Move"
		End
		StreamEdit -o "{tempFolder}forceCommands" -d -e '						¶
			/StandardHeadersNoDebugPPC/	Delete ; 						¶
			/StandardHeadersNoDebug68K/	Delete ; 						¶
			/StandardHeadersPPC/	Delete ; 								¶
			/StandardHeaders68K/	Delete ; 								¶
			/¶"(Å)¨1¶"Å</											¶
				Print	"¶/" ¨1 "¶/¶t"								¶
						"Print	¶"ForceNewRevision ¶¶¶"" ¨1 "¶¶¶"¶""; 		¶
					' "{tempFolder}diffLocations"
		StreamEdit 	-o "{tempFolder}forceRevisions" -d -s "{tempFolder}forceCommands" ¶
					"{tempFolder}localFiles"
	Else
		Echo " " > "{tempFolder}forceRevisions"
	End
	If {doItForYou} == 0
		Sort "{tempFolder}checkOutNew" "{tempFolder}checkInNew" "{tempFolder}commandList" ¶
			"{tempFolder}localCheckouts" "{tempFolder}mergeOuts" "{tempFolder}forceRevisions"
	Else
		Sort -o "{tempFolder}doStuff" ¶
			"{tempFolder}checkOutNew" "{tempFolder}checkInNew" "{tempFolder}commandList" ¶
			"{tempFolder}localCheckouts" "{tempFolder}mergeOuts" "{tempFolder}forceRevisions"
		If `Count -c "{tempFolder}doStuff"` != 0
			DoIt "{tempFolder}doStuff"
		End
	End
	Shift
End
If {checkStuffOut} == 1 && ((`Exists "{tempFolder}commandList"` && `Count -c "{tempFolder}commandList"` != 0) || ¶
	(`Exists "{tempFolder}localCheckouts"` && `Count -c "{tempFolder}localCheckouts"` != 0))
	If "`set exit 0; which 'Build WebTV' ³ dev:null; set exit 1`"
		echo '"Build WebTV"'
	Else If "`set exit 0; which 'BuildWebTV' ³ dev:null; set exit 1`"
		echo 'BuildWebTV'
	End
End
If {verbose} == 1
	Echo "# `date -t`  Done"
End
# exit 0
### the following could be used to strip out the new files
#	### use stream edit to turn a copy of diffFiles into a stream edit script
#	StreamEdit -o "{tempFolder}projectDeletions" -d -e '				¶
#		/([ 0-9,]+)¨1d([ 0-9,]+)/ 	Print 	¨1 " Delete" 	;		¶
#		/([ 0-9,]+)¨1c([ 0-9,]+)/ 	Print 	¨1 " Delete" 			¶
#								' "{tempFolder}diffFiles"
#	### the stream edit script then deletes the lines from projectRevisions
#	StreamEdit 	-o "{tempFolder}projectRevisions" 					¶
#				-s "{tempFolder}projectDeletions"					¶
#				"{tempFolder}projectRevisions"
#				
#	### use stream edit to turn a copy of diffFiles into a stream edit script
#	StreamEdit -o "{tempFolder}localDeletions" -d -e '					¶
#		/([ 0-9,]+)a([ 0-9,]+)¨1/ 	Print 	¨1 " Delete" 	;		¶
#		/([ 0-9,]+)c([ 0-9,]+)¨1/ 	Print 	¨1 " Delete" 			¶
#								' "{tempFolder}diffFiles"
##	### the stream edit script then deletes the lines from projectRevisions
#	StreamEdit 	-o "{tempFolder}localRevisions" 					¶
#				-s "{tempFolder}localDeletions"					¶
#				"{tempFolder}localRevisions"
