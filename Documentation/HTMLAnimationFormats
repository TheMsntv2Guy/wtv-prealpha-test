Old Formats
	CelImage: All frame data stored as areas in a GIF document
		PERIOD = %d (mandatory)
		IMAGE = %s (mandatory)
		SWING (optional)
		FRAME = %d %d %d %d\nADVANCE = %d %d (optional)
		FRAME = %d %d %d %d\nADVANCE = %d %d (optional)
		...
		FRAME = %d %d %d %d\nADVANCE = %d %d (optional)
		
	AnimationImage: All frame data stored as separate GIFs
		PERIOD = %d (mandatory)
		SWING (optional)
		IMAGE = %s (optional)
		IMAGE = %s (optional)
		...
		IMAGE = %s (optional)

Non-HTML New Formats: Everything is converted to lower-case, conceptually
	CelImage: All frame data stored as areas in a GIF document
		PERIOD = %d (mandatory)		# number of 60ths of a second
		IMAGE = %s (mandatory)
		SWING (optional)
		HBOUNCE						# will bounce back off the left or right wall
		VBOUNCE						# will bounce back off the top or bottom wall
		HFLIP						# will flip on horizontal bounce
		VFLIP						# will flip on vertical bounce
		BLUR						# leave a motion blurred trail
		# everything after pound sign is a comment
		#
		FRAME <frame name> = %d %d %d %d\nADVANCE = %d %d (optional)
		FRAME <frame name> = %d %d %d %d\nADVANCE = %d %d (optional)
		...
		FRAME <frame name> = %d %d %d %d\nADVANCE = %d %d (optional)
		SOUND <sound name> = %s (optional)
		#
		LOOP (or LOOP %d) (or LOOP <sound name>)
			FRAME <frame name>
			FRAME = %d %d %d %d\nADVANCE = %d %d (optional)
			SOUND <sound name>
			SOUND = %s (optional)
			DELAY %d			# delay this many 60ths of a second
			DELAY <sound name>	# delay until this sound done playing
			ZOOM = %d%			# 100% = same size as before
			FADE = %d%			# 0% = fully transparent
			FADEOUT				# begin a controlled fade to 0% over next several frames
		END
		<All unparseable lines are ignored>		

New HTML Formats: New HTML tags and attributes. Like image maps, the animation can be
specified in the same HTML document or another document.

	<ANIMATION PERIOD = %d SRC = %s SWING HBOUNCE VBOUNCE HFLIP VFLIP BLUR STARTX=%d STARTY=%d LOOP=%d>
		<IMG SRC = %s ...>
		<FRAME SRC = %s BOUNDS = "%d, %d, %d, %d" ADVANCE = "%d, %d">
		<SOUND SRC = %s NAME = "sound name">
		
		<LOOP COUNT = %d SOUND = "sound name">
			<FRAME SRC = %s BOUNDS = "%d, %d, %d, %d" ADVANCE = "%d, %d">
			<DELAY PERIOD = %d SOUND = "sound name">
			<ZOOM %d%>
			<FADE %d%>
			<FADEOUT>
		</LOOP>
	</ANIMATION>

ANIMATION
	The <ANIMATION> tag specifies an animation to be played as part of the document.
	The animation is a collection of animation tags that specify the progression of
	the animation, including looping features.
	
	The following attributes are supported.

	PERIOD = %d (mandatory)		# number of 60ths of a second
	SWING (optional)
	SRC = %s					# source image used for frames that don't specify
								# an explicit source.
	HBOUNCE						# will bounce back off the left or right wall
	VBOUNCE						# will bounce back off the top or bottom wall
	HFLIP						# will flip on horizontal bounce
	VFLIP						# will flip on vertical bounce
	BLUR						# leave a motion blurred trail
	STARTX						# X start in document coordinates
	STARTY						# Y start in document coordinates

IMG
	This is the standard HTML <IMG> tag. This tag can be included here to provide
	an image to be used as an alternate on browsers that do not support animations.
	WebTV ignores any <IMG> tag contained within <ANIMATION>.
		
FRAME
	The <FRAME> tag specifies an individual frame for the animation. It can specify
	an image, a bounds of within an or both.
	
	The following attributes are supported: 
	SRC = %s					# source image for this frame. If missing
								# defaults to the source image specified by
								# the containing ANIMATION tag.
	SHAPE = RECT				# shape of image source bounds. Only RECT
								# support now. Default is RECT
	COORDS = "%d, %d, %d, %d"	# Coordinates of shape. For RECT coords are
								# left, top, right, bottom. Default is source
								# image bounds.
	ADVANCE = %d, %d"			# Advance for animation position before showing
								# this frame. Default is 0, 0.
SOUND <sound name> = %s (optional)
DELAY
ZOOM
FADE
FADEOUT
LOOP


Implementations
	typedef struct
	{
		ushort	type;
		union
		{
			DrawFrameCommand		draw;
			DelayFrameCommand		delay;
			SoundFrameCommand		sound;
			ZoomFrameCommand		zoom;
			FadeFrameCommand		fade;
			FadeOutFrameCommand		fadeout;
			CountedLoopFrameCommand	countedLoop;
			SoundLoopFrameCommand	soundLoop;
			EndFrameCommand			end;
		} u;
	} FrameCommand;
	To figure size of array, count newlines and allocate that many Frames
	
New Tags
	???<IMG ANI="<cel url name>" LAYER=%d ANISTARTX=%d ANISTARTY=%d LOOP>   (layer value may be -32767 to 32767 (>0 is in front of document))

ToDo
	Deal with bad animations
		- no frames
		- bad bounds
		- bad advance
	Write unit test
	Write builder?
	Support JPEG (and others) via NewImageData (instead of NewGIFImage)
	Support multiple layers
	Scrolling for animations?
